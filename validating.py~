import trueskill as ts
import pandas as pd
import numpy as np
import math
from sqlalchemy import create_engine
from sqlalchemy_utils import database_exists, create_database
import MySQLdb as mdb
import time
import mpmath

year = 2014

unratedRating = 5000
BILright = 0
BILgames = 0
COLright = 0
COLgames = 0
MASright = 0
MASgames = 0
SAGright = 0
SAGgames = 0
WOLright = 0
WOLgames = 0
AHright = 0
AHgames = 0
Kimright = 0
Kimgames = 0
Coachright = 0
Coachgames = 0
APright = 0
APgames = 0

#connect to SQL
login = pd.read_pickle('credentials.pkl')
username = login.usernames.ix[0]
password = login.passwords.ix[0]
con = mdb.connect(host='localhost',user=username,passwd=password,db='NCAA',unix_socket="/tmp/mysql.sock")
	

#season DataFrames
seasonGames = pd.read_sql_query('select Team, Wk from games where season = ' + str(year),con)

for week in seasonGames.Wk.unique():
	weekGames = pd.read_sql_query('select winner, loser, winnerPts, loserPts from games where Wk = ' + week + ' and season = ' + str(year),con)
	weekGames = weekGames.dropna()
	
	def findRank(metric,NCAAtable,year,week,team):
		teamRank = pd.read_sql_query('select ' + metric + ' from ' + NCAAtable + ' where season = ' + str(year) + ' and Week = ' + str(week) + ' and team = \'' + str(team) + '\'',con).values
		if len(teamRank) == 0:
			teamRank = unratedRating
		#else:
		#	print teamRank[0][0] == None
		elif teamRank[0][0] == None:
			teamRank = unratedRating
		elif type(teamRank[0][0]) == str:
			teamRank = int(teamRank[0][0])
		#elif math.isnan(teamRank):
		#	teamRank = unratedRating
		teamRank = int(teamRank)
		return teamRank
						
	def validate_game(system,NCAAtable,year,week,game,loserteam,right,games):
		winnerRank = findRank(system,NCAAtable,year,week,game)
		loserRank = findRank(system,NCAAtable,year,week,loserteam)
		if winnerRank < loserRank:
			right += 1
			games += 1
		elif winnerRank > loserRank:
			games += 1
		return right, games
		
	for game in weekGames.winner.unique():
		#winnerIndex = ratings[0].index(game)
		loserteam = weekGames[weekGames.winner == game].iloc[0].loser
					
		#algorithms
		BILright, BILgames = validate_game('BIL','algorithmRankings',year,week,game,loserteam,BILright,BILgames)
		COLright, COLgames = validate_game('COL','algorithmRankings',year,week,game,loserteam,COLright,COLgames)
		MASright, MASgames = validate_game('MAS','algorithmRankings',year,week,game,loserteam,MASright,MASgames)
		SAGright, SAGgames = validate_game('SAG','algorithmRankings',year,week,game,loserteam,SAGright,SAGgames)
		WOLright, WOLgames = validate_game('WOL','algorithmRankings',year,week,game,loserteam,WOLright,WOLgames)
		AHright, AHgames = validate_game('AandHRank','algorithmRankings',year,week,game,loserteam,AHright,AHgames)
						
		#polls
		Coachright, Coachgames = validate_game('CoachRank','combinedRankings',year,week,game,loserteam,Coachright,Coachgames)
		APright, APgames = validate_game('APRank','combinedRankings',year,week,game,loserteam,APright,APgames)
	
print 'BIL: ' + str(BILright*100./BILgames)
print 'COL: ' + str(COLright*100./COLgames)
print 'MAS: ' + str(MASright*100./MASgames)
print 'SAG: ' + str(SAGright*100./SAGgames)
print 'WOL: ' + str(WOLright*100./WOLgames)
print 'AH: ' + str(AHright*100./AHgames)
print 'Coach: ' + str(Coachright*100./Coachgames)
print 'AP: ' + str(APright*100./APgames)
#print 'Kim: ' + Kimright*100./Kimgames
						